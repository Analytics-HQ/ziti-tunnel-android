/*
 * Copyright (c) 2020 NetFoundry. All rights reserved.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.zitiMajor = 0
    ext.zitiMinor = 5

    ext.kotlin_version = '1.3.72'
    ext.zitiBuildnum = System.getProperty("ziti.buildNum") ?: 'local'

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id("io.wusa.semver-git-plugin").version("2.1.0")
}

semver {
    // nextVersion = "patch"
    snapshotSuffix = "${zitiBuildnum}<dirty>"
    dirtyMarker = "-dirty"
    initialVersion = "0.3.0"
}

group = 'org.openziti'

allprojects {
    def versionPrefix = ""
    def versionSuffix = "-${zitiBuildnum}"

    if (semver.info.branch.id != 'master') {
        versionPrefix = "${semver.info.branch.id}-"
        versionSuffix = ""
    }
    version = "${versionPrefix}${semver.info.version}${versionSuffix}"

    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task tagIfNeeded() {
    doLast {
        def ver = semver.info.version
        if (semver.info.branch.id == 'master' && semver.info.tag == "none") {
            def tag = "${ver.major}.${ver.minor}.${ver.patch}"

            if (zitiMajor > ver.major || (zitiMajor == ver.major && zitiMinor > ver.minor)) {
                tag = "${zitiMajor}.${zitiMinor}.0"
                logger.log(LogLevel.LIFECYCLE, "advancing tag to $tag")
            }

            logger.log(LogLevel.LIFECYCLE, "tagging with $tag")

            exec {
                commandLine 'git', 'tag', '-a', tag, '-m', "semver bump to ${tag}"
            }

            exec {
                commandLine 'git', 'push', '--tags'
            }
        } else {
            logger.log(LogLevel.LIFECYCLE, "tagging is skipped because tag exists or not on master")
        }
    }
}
